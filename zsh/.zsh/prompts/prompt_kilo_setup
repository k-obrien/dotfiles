prompt_kilo_setup() {
    # %B (%b)                   :  Start (stop) boldface mode
    # %F{...} (%f)              :  Start (stop) using a foreground color other than the default; see https://jonasjacek.github.io/colors/
    # %(x.true-text.false-text) :  Ternary expression; print true-text if ‘x’ is true and false-text otherwise

    # %~    :  Current directory; ‘~’ denotes home
    prompt_pwd='%B%F{blue}%~%f%b'

    prompt_git_info=""

    # !     :  Ternary test character; true if the shell is running with privileges
    # %n@%m :  Print ‘username@hostname’
    # %#    :  Print ‘#’ if privileged user and ‘%’ otherwise
    prompt_user_and_host='%F{%(!.red.green)}%n@%m %#%f '

    # ?     :  Ternary test character; true if the exit status of the last command exceeds zero
    # %?    :  Print the exit code of previous command
    # nj    :  Ternary test character; true if the number of jobs is >= ‘n’
    # +%j   :  Print the number of jobs prefixed with a ‘+’
    prompt_exit_val_and_jobs='%(?..%F{red}?%?%f) %(1j.+%j.)'

    if [ -f "${ZDOTDIR}"/zsh.d/git-prompt.zsh ]; then
        export ZSH_THEME_GIT_PROMPT_REMOTE_MISSING=":"      # Branch does not exist on remote
        export ZSH_THEME_GIT_PROMPT_AHEAD_REMOTE="+"        # Branch is ahead of remote
        export ZSH_THEME_GIT_PROMPT_BEHIND_REMOTE="-"       # Branch is behind remote
        export ZSH_THEME_GIT_PROMPT_DIVERGED_REMOTE="±"     # Branch and remote have diverged
        export ZSH_THEME_GIT_PROMPT_DIRTY="%F{red}"         # Colour branch name red if changes exist
        export ZSH_THEME_GIT_PROMPT_CLEAN="%F{green}"       # Colour branch name green if no changes exist
        export ZSH_THEME_GIT_PROMPT_UNTRACKED="⋀"           # The working tree contains untracked files
        export ZSH_THEME_GIT_PROMPT_STASHED="⋁"             # The working tree contains stashed changes
        export ZSH_THEME_GIT_PROMPT_UNTRACKED_STASHED="⩙"   # The working tree contains untracked files and stashed changes
        export DISABLE_UNTRACKED_FILES_DIRTY="true"         # Don't count untracked files as changes
    fi

    # Start a worker for background tasks
    async_start_worker prompt_kilo_worker
    #  Register the completion callback for background tasks
    async_register_callback prompt_kilo_worker prompt_kilo_work_complete

    PS1='${prompt_newline}%${COLUMNS}<...<${prompt_pwd}${prompt_git_info}%<<${prompt_newline}${prompt_user_and_host}'
    RPS1="${prompt_exit_val_and_jobs}"

    add-zsh-hook chpwd prompt_kilo_chpwd
    add-zsh-hook precmd prompt_kilo_precmd
}

prompt_kilo_chpwd() {
    async_worker_eval prompt_kilo_worker cd $PWD
}

prompt_kilo_precmd() {
    async_job prompt_kilo_worker prompt_kilo_update_git_info
}

prompt_kilo_update_git_info() {
    local git_current_branch="$(git_current_branch)"
    local git_status_separator=" | "
    local git_remote_status="$(git_prompt_remote)$(git_remote_status)"
    local git_local_status="$(parse_git_dirty)${git_current_branch}%f$(git_prompt_status)"
    # Conflate untracked and stashed symbols
    local git_local_status=${git_local_status//${ZSH_THEME_GIT_PROMPT_STASHED}${ZSH_THEME_GIT_PROMPT_UNTRACKED}/${ZSH_THEME_GIT_PROMPT_UNTRACKED_STASHED}}
    # Show git status only if local repo exists
    print "${git_current_branch:+${git_status_separator}${git_remote_status}${git_local_status}}"
}

prompt_kilo_work_complete() {
    local return_code=$2
    local next_result_in_buffer=$6

    if ((next_result_in_buffer == 0)); then
        ((return_code == 0)) && prompt_git_info="$3" || prompt_git_info=" | %F{red}!!%f"
        zle reset-prompt
    fi
}

prompt_kilo_setup "$@"
